/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _interfaces_motherboard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interfaces/motherboard */ \"./src/interfaces/motherboard.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\nconst motherBoard = new _interfaces_motherboard__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\nconst start = () => __awaiter(void 0, void 0, void 0, function* () {\n    yield motherBoard.loadRom(\"/roms/missle.ch8\");\n    motherBoard.boot();\n});\nstart();\n\n\n//# sourceURL=webpack://chip8-js/./src/index.ts?");

/***/ }),

/***/ "./src/interfaces/cpu/index.ts":
/*!*************************************!*\
  !*** ./src/interfaces/cpu/index.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CPU)\n/* harmony export */ });\n/* harmony import */ var _instructions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instructions */ \"./src/interfaces/cpu/instructions.ts\");\n\n/* implementation of a Chip 8 CPU */\nclass CPU {\n    constructor(motherBoard) {\n        /* Reset the cpu to the intial state */\n        this.reset = () => {\n            this.registers = new Uint8Array(16);\n            this.stack = new Uint16Array(16);\n            this.SP = -1;\n            this.I = 0;\n            this.ST = 0;\n            this.DT = 0;\n            this.PC = 0x200;\n        };\n        /* Given an opcode, return an parsed OpcodeData */\n        this.decode = (opcode) => {\n            let opcodeData = {\n                opcodeName: \"UNKOWN\",\n                opcode: opcode,\n                args: [],\n            };\n            // iterate over all instruction and test if the current code match one of them.\n            for (const instruction of _instructions__WEBPACK_IMPORTED_MODULE_0__.opcodeDecoderTable) {\n                if ((opcode & instruction.mask) === instruction.code) {\n                    // we found the instruction. save it.\n                    opcodeData.opcodeName = instruction.name;\n                    opcodeData.opcode = opcode;\n                    // start parsing arguments.\n                    for (const arg of instruction.args) {\n                        // for each argument in the instruction , we mask and shift .\n                        const newArgument = (opcode & arg.mask) >> arg.shift;\n                        opcodeData.args.push(newArgument);\n                    }\n                    break;\n                }\n            }\n            return opcodeData;\n        };\n        /* Execute an opcode by the given opcode data */\n        this.execute = (opcodeData) => {\n            let nextInstruction = true;\n            switch (opcodeData.opcodeName) {\n                case \"CLS\":\n                    // Clear display.\n                    this.motherBoard.getDisplay().clear();\n                    break;\n                case \"RET\":\n                    // Return from sub routine. (PC = current address in the stack and reduce the stack)\n                    this.PC = this.stack[this.SP];\n                    this.SP--;\n                    nextInstruction = false;\n                    break;\n                case \"JP_ADDR\":\n                    // Jump to address in arg1.\n                    this.PC = opcodeData.args[0];\n                    nextInstruction = false;\n                    break;\n                case \"CALL_ADDR\":\n                    // call address in arg1 and save current location in stack.\n                    this.SP++;\n                    this.stack[this.SP] = this.PC + 2;\n                    this.PC = opcodeData.args[0];\n                    nextInstruction = false;\n                    break;\n                case \"SE_VX_BYTE\":\n                    // skip instruction if VX equal to arg1.\n                    if (this.registers[opcodeData.args[0]] === opcodeData.args[1])\n                        this.PC += 2;\n                    break;\n                case \"SNE_VX_BYTE\":\n                    // skip instruction if VX not equal to arg1.\n                    if (this.registers[opcodeData.args[0]] !== opcodeData.args[1])\n                        this.PC += 2;\n                    break;\n                case \"SE_VX_VY\":\n                    // skip instruction if VX not equal to arg1.\n                    if (this.registers[opcodeData.args[0]] ===\n                        this.registers[opcodeData.args[1]])\n                        this.PC += 2;\n                    break;\n                case \"LD_VX_BYTE\":\n                    // set register arg1 to arg2.\n                    this.registers[opcodeData.args[0]] = opcodeData.args[1];\n                    break;\n                case \"ADD_VX_BYTE\":\n                    // add byte in arg2 to register arg1.\n                    let v = this.registers[opcodeData.args[0]] + opcodeData.args[1];\n                    if (v > 255) {\n                        v -= 256;\n                    }\n                    this.registers[opcodeData.args[0]] = v;\n                    break;\n                case \"LD_VX_VY\":\n                    // Vx = Vy\n                    this.registers[opcodeData.args[0]] = this.registers[opcodeData.args[1]];\n                    break;\n                case \"OR_VX_VY\":\n                    // Vx = Vx OR Vy\n                    this.registers[opcodeData.args[0]] |=\n                        this.registers[opcodeData.args[1]];\n                    break;\n                case \"AND_VX_VY\":\n                    //  Vx = Vx AND Vy\n                    this.registers[opcodeData.args[0]] &=\n                        this.registers[opcodeData.args[1]];\n                    break;\n                case \"XOR_VX_VY\":\n                    // Vx = Vx XOR Vy\n                    this.registers[opcodeData.args[0]] ^=\n                        this.registers[opcodeData.args[1]];\n                    break;\n                case \"ADD_VX_VY\":\n                    // Vx = Vx + Vy, if overflow VF = 1\n                    this.registers[0xf] =\n                        this.registers[opcodeData.args[0]] +\n                            this.registers[opcodeData.args[1]] >\n                            0xff\n                            ? 1\n                            : 0;\n                    this.registers[opcodeData.args[0]] +=\n                        this.registers[opcodeData.args[1]];\n                    break;\n                case \"SUB_VX_VY\":\n                    // Vx = Vx - Vy , VF = Not Borrow\n                    this.registers[0xf] =\n                        this.registers[opcodeData.args[0]] >\n                            this.registers[opcodeData.args[1]]\n                            ? 1\n                            : 0;\n                    this.registers[opcodeData.args[0]] -=\n                        this.registers[opcodeData.args[1]];\n                    break;\n                case \"SHR_VX_VY\":\n                    // Vx = VX SHR 1, if LSB of Vx == 1, VF = 1\n                    this.registers[0xf] = this.registers[opcodeData.args[0]] & 1;\n                    this.registers[opcodeData.args[0]] >>= 1;\n                    break;\n                case \"SUBN_VX_VY\":\n                    // Vx = Vy - Vx, VF = NOT Borrow\n                    this.registers[0xf] =\n                        this.registers[opcodeData.args[1]] >\n                            this.registers[opcodeData.args[0]]\n                            ? 1\n                            : 0;\n                    this.registers[opcodeData.args[0]] =\n                        this.registers[opcodeData.args[1]] -\n                            this.registers[opcodeData.args[0]];\n                    break;\n                case \"SHL_VX_VY\":\n                    // Vx = VX SHL 1, if LMSB of Vx == 1, VF = 1\n                    this.registers[0xf] = this.registers[opcodeData.args[0]] >> 7;\n                    this.registers[opcodeData.args[0]] <<= 1;\n                    break;\n                case \"SNE_VX_VY\":\n                    // Skip instruction if Vx and Vy are not equal.\n                    if (this.registers[opcodeData.args[0]] !==\n                        this.registers[opcodeData.args[1]])\n                        this.PC += 2;\n                    break;\n                case \"LD_I_ADDR\":\n                    // I = Memory address\n                    this.I = opcodeData.args[0];\n                    break;\n                case \"JP_V0_ADDR\":\n                    // PC = V0 + ADDR\n                    this.PC = this.registers[0] + opcodeData.args[0];\n                    nextInstruction = false;\n                    break;\n                case \"RND_VX_BYTE\":\n                    // Rand number into V[arg1] AND arg2\n                    this.registers[opcodeData.args[0]] =\n                        (Math.random() * 255) & opcodeData.args[1];\n                case \"DRW_VX_VY_NIBBLE\":\n                    /* Draw on display location V[x] V[y] data from I. Each byte contains 8 pixels line.\n                    // arg3 represent the number of lines if the location already contains a pixel set V[f] */\n                    this.registers[0xf] = 0;\n                    for (let y = 0; y < opcodeData.args[2]; y++) {\n                        const line = this.motherBoard.getRAM().getByte(this.I + y);\n                        for (let x = 0; x < 8; x++) {\n                            const pixel = line & (1 << (7 - x)) ? 1 : 0;\n                            const currentX = this.registers[opcodeData.args[0]] + x;\n                            const currentY = this.registers[opcodeData.args[1]] + y;\n                            if (this.motherBoard.getDisplay().drawPixel(currentX, currentY, pixel)) {\n                                this.registers[0xf] = 1;\n                            }\n                        }\n                    }\n                    break;\n                case \"SKP_VX\":\n                    // Skip instruction if key in V[x] pressed .\n                    if (this.motherBoard\n                        .getKeyboard()\n                        .isPressed(this.registers[opcodeData.args[0]])) {\n                        this.PC += 2;\n                    }\n                    break;\n                case \"SKNP_VX\":\n                    // Skip instruction if key V[x] is not pressed.\n                    if (!this.motherBoard\n                        .getKeyboard()\n                        .isPressed(this.registers[opcodeData.args[0]])) {\n                        this.PC += 2;\n                    }\n                    break;\n                case \"LD_VX_DT\":\n                    // Load clock value in V[x].\n                    this.registers[opcodeData.args[0]] = this.DT;\n                    break;\n                case \"LD_VX_K\":\n                    // Load pressed keys into V[x].\n                    const keyPressed = this.motherBoard\n                        .getKeyboard()\n                        .getCurrentPressed();\n                    if (keyPressed === undefined) {\n                        nextInstruction = false;\n                        break;\n                    }\n                    this.registers[opcodeData.args[0]] = keyPressed;\n                    break;\n                case \"LD_DT_VX\":\n                    // Load clock with V[x] value.\n                    this.DT = this.registers[opcodeData.args[0]];\n                    break;\n                case \"LD_ST_VX\":\n                    // Load sound timer with V[x] value.\n                    this.ST = this.registers[opcodeData.args[0]];\n                    break;\n                case \"ADD_I_VX\":\n                    // V[x] to I\n                    this.I += this.registers[opcodeData.args[0]];\n                    break;\n                case \"LD_F_VX\":\n                    // Load font number from sprite from V[x] into I\n                    this.I = this.registers[opcodeData.args[0]] * 5;\n                    break;\n                case \"LD_B_VX\":\n                    //Load BCD representation of the number given in V[x]\n                    let number = this.registers[opcodeData.args[0]];\n                    const hundreds = Math.floor(number / 100);\n                    number -= hundreds * 100;\n                    const tens = Math.floor(number / 10);\n                    number -= tens * 10;\n                    const ones = Math.floor(number);\n                    this.motherBoard.getRAM().setByte(this.I, hundreds);\n                    this.motherBoard.getRAM().setByte(this.I + 1, tens);\n                    this.motherBoard.getRAM().setByte(this.I + 2, ones);\n                    break;\n                case \"LD_[I]_VX\":\n                    // Load into I V0 to arg1, increment I by the number of registers stored.\n                    for (let i = 0; i <= opcodeData.args[0]; i++) {\n                        this.motherBoard.getRAM().setByte(this.I + i, this.registers[i]);\n                    }\n                    this.I += opcodeData.args[0];\n                    break;\n                case \"LD_VX_[I]\":\n                    // Load I into V0..to arg1\n                    for (let i = 0; i <= opcodeData.args[0]; i++) {\n                        this.registers[i] = this.motherBoard.getRAM().getByte(this.I + i);\n                    }\n                    this.I += opcodeData.args[0];\n                    break;\n                default:\n            }\n            // Each iteration forward to next instruction.\n            if (nextInstruction) {\n                this.PC += 2;\n            }\n        };\n        /* Execute one opcode */\n        this.cycle = () => {\n            // Fetch next opcode from PC\n            const opcode = this.motherBoard.getRAM().getWord(this.PC);\n            // Decode\n            const data = this.decode(opcode);\n            // Debug to console :)\n            let printData = data.opcode.toString(16) + \" \" + data.opcodeName + \" \";\n            for (const arg of data.args) {\n                printData += arg.toString(16) + \" \";\n            }\n            console.log(printData);\n            // Execute\n            this.execute(data);\n        };\n        /* Timer callback handler */\n        this.timerTick = () => {\n            // Each tick reduce DT until zero reached.\n            if (this.DT != 0) {\n                this.DT--;\n            }\n        };\n        /* Sound timer handler */\n        this.soundTick = () => {\n            // Each Tick reduce ST until zero reached.\n            if (this.ST != 0) {\n                this.ST--;\n            }\n            return this.ST;\n        };\n        this.motherBoard = motherBoard;\n        this.reset();\n    }\n}\n\n\n//# sourceURL=webpack://chip8-js/./src/interfaces/cpu/index.ts?");

/***/ }),

/***/ "./src/interfaces/cpu/instructions.ts":
/*!********************************************!*\
  !*** ./src/interfaces/cpu/instructions.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"opcodeDecoderTable\": () => (/* binding */ opcodeDecoderTable)\n/* harmony export */ });\nconst opcodeDecoderTable = [\n    { name: \"CLS\", mask: 0xffff, code: 0x00e0, args: [] },\n    { name: \"RET\", mask: 0xffff, code: 0x00ee, args: [] },\n    {\n        name: \"JP_ADDR\",\n        mask: 0xf000,\n        code: 0x1000,\n        args: [{ mask: 0x0fff, shift: 0 }],\n    },\n    {\n        name: \"CALL_ADDR\",\n        mask: 0xf000,\n        code: 0x2000,\n        args: [{ mask: 0x0fff, shift: 0 }],\n    },\n    {\n        name: \"SE_VX_BYTE\",\n        mask: 0xf000,\n        code: 0x3000,\n        args: [\n            { mask: 0x0f00, shift: 8 },\n            { mask: 0x00ff, shift: 0 },\n        ],\n    },\n    {\n        name: \"SNE_VX_BYTE\",\n        mask: 0xf000,\n        code: 0x4000,\n        args: [\n            { mask: 0x0f00, shift: 8 },\n            { mask: 0x00ff, shift: 0 },\n        ],\n    },\n    {\n        name: \"SE_VX_VY\",\n        mask: 0xf00f,\n        code: 0x5000,\n        args: [\n            { mask: 0x0f00, shift: 8 },\n            { mask: 0x00f0, shift: 4 },\n        ],\n    },\n    {\n        name: \"LD_VX_BYTE\",\n        mask: 0xf000,\n        code: 0x6000,\n        args: [\n            { mask: 0x0f00, shift: 8 },\n            { mask: 0x00ff, shift: 0 },\n        ],\n    },\n    {\n        name: \"ADD_VX_BYTE\",\n        mask: 0xf000,\n        code: 0x7000,\n        args: [\n            { mask: 0x0f00, shift: 8 },\n            { mask: 0x00ff, shift: 0 },\n        ],\n    },\n    {\n        name: \"LD_VX_VY\",\n        mask: 0xf00f,\n        code: 0x8000,\n        args: [\n            { mask: 0x0f00, shift: 8 },\n            { mask: 0x00f0, shift: 4 },\n        ],\n    },\n    {\n        name: \"OR_VX_VY\",\n        mask: 0xf00f,\n        code: 0x8001,\n        args: [\n            { mask: 0x0f00, shift: 8 },\n            { mask: 0x00f0, shift: 4 },\n        ],\n    },\n    {\n        name: \"AND_VX_VY\",\n        mask: 0xf00f,\n        code: 0x8002,\n        args: [\n            { mask: 0x0f00, shift: 8 },\n            { mask: 0x00f0, shift: 4 },\n        ],\n    },\n    {\n        name: \"XOR_VX_VY\",\n        mask: 0xf00f,\n        code: 0x8003,\n        args: [\n            { mask: 0x0f00, shift: 8 },\n            { mask: 0x00f0, shift: 4 },\n        ],\n    },\n    {\n        name: \"ADD_VX_VY\",\n        mask: 0xf00f,\n        code: 0x8004,\n        args: [\n            { mask: 0x0f00, shift: 8 },\n            { mask: 0x00f0, shift: 4 },\n        ],\n    },\n    {\n        name: \"SUB_VX_VY\",\n        mask: 0xf00f,\n        code: 0x8005,\n        args: [\n            { mask: 0x0f00, shift: 8 },\n            { mask: 0x00f0, shift: 4 },\n        ],\n    },\n    {\n        name: \"SHR_VX_VY\",\n        mask: 0xf00f,\n        code: 0x8006,\n        args: [\n            { mask: 0x0f00, shift: 8 },\n            { mask: 0x00f0, shift: 4 },\n        ],\n    },\n    {\n        name: \"SUBN_VX_VY\",\n        mask: 0xf00f,\n        code: 0x8007,\n        args: [\n            { mask: 0x0f00, shift: 8 },\n            { mask: 0x00f0, shift: 4 },\n        ],\n    },\n    {\n        name: \"SHL_VX_VY\",\n        mask: 0xf00f,\n        code: 0x800e,\n        args: [\n            { mask: 0x0f00, shift: 8 },\n            { mask: 0x00f0, shift: 4 },\n        ],\n    },\n    {\n        name: \"SNE_VX_VY\",\n        mask: 0xf00f,\n        code: 0x9000,\n        args: [\n            { mask: 0x0f00, shift: 8 },\n            { mask: 0x00f0, shift: 4 },\n        ],\n    },\n    {\n        name: \"LD_I_ADDR\",\n        mask: 0xf000,\n        code: 0xa000,\n        args: [{ mask: 0x0fff, shift: 0 }],\n    },\n    {\n        name: \"JP_VP_ADDR\",\n        mask: 0xf000,\n        code: 0xb000,\n        args: [{ mask: 0x0fff, shift: 0 }],\n    },\n    {\n        name: \"RND_VX_BYTE\",\n        mask: 0xf000,\n        code: 0xc000,\n        args: [\n            { mask: 0x0f00, shift: 8 },\n            { mask: 0x00ff, shift: 0 },\n        ],\n    },\n    {\n        name: \"DRW_VX_VY_NIBBLE\",\n        mask: 0xf000,\n        code: 0xd000,\n        args: [\n            { mask: 0x0f00, shift: 8 },\n            { mask: 0x00f0, shift: 4 },\n            { mask: 0x000f, shift: 0 },\n        ],\n    },\n    {\n        name: \"SKP_VX\",\n        mask: 0xf0ff,\n        code: 0xe09e,\n        args: [{ mask: 0x0f00, shift: 8 }],\n    },\n    {\n        name: \"SKNP_VX\",\n        mask: 0xf0ff,\n        code: 0xe0a1,\n        args: [{ mask: 0x0f00, shift: 8 }],\n    },\n    {\n        name: \"LD_VX_DT\",\n        mask: 0xf0ff,\n        code: 0xf007,\n        args: [{ mask: 0x0f00, shift: 8 }],\n    },\n    {\n        name: \"LD_VX_K\",\n        mask: 0xf0ff,\n        code: 0xf00a,\n        args: [{ mask: 0x0f00, shift: 8 }],\n    },\n    {\n        name: \"LD_DT_VX\",\n        mask: 0xf0ff,\n        code: 0xf015,\n        args: [{ mask: 0x0f00, shift: 8 }],\n    },\n    {\n        name: \"LD_ST_VX\",\n        mask: 0xf0ff,\n        code: 0xf018,\n        args: [{ mask: 0x0f00, shift: 8 }],\n    },\n    {\n        name: \"ADD_I_VX\",\n        mask: 0xf0ff,\n        code: 0xf01e,\n        args: [{ mask: 0x0f00, shift: 8 }],\n    },\n    {\n        name: \"LD_F_VX\",\n        mask: 0xf0ff,\n        code: 0xf029,\n        args: [{ mask: 0x0f00, shift: 8 }],\n    },\n    {\n        name: \"LD_B_VX\",\n        mask: 0xf0ff,\n        code: 0xf033,\n        args: [{ mask: 0x0f00, shift: 8 }],\n    },\n    {\n        name: \"LD_[I]_VX\",\n        mask: 0xf0ff,\n        code: 0xf055,\n        args: [{ mask: 0x0f00, shift: 8 }],\n    },\n    {\n        name: \"LD_VX_[I]\",\n        mask: 0xf0ff,\n        code: 0xf065,\n        args: [{ mask: 0x0f00, shift: 8 }],\n    },\n];\n\n\n//# sourceURL=webpack://chip8-js/./src/interfaces/cpu/instructions.ts?");

/***/ }),

/***/ "./src/interfaces/display.ts":
/*!***********************************!*\
  !*** ./src/interfaces/display.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Display)\n/* harmony export */ });\nconst DISPLAY_WIDTH = 64;\nconst DISPLAY_HEIGHT = 32;\nconst DISPLAY_COLOR = \"green\";\n/* Emulation of a chip 8 display using canvas */\nclass Display {\n    constructor() {\n        /* Clear the frame buffer */\n        this._clearBuffer = () => {\n            for (let i = 0; i < DISPLAY_HEIGHT * DISPLAY_WIDTH; i++) {\n                this.frameBuffer[i] = 0;\n            }\n        };\n        /* Clear the display and the buffer */\n        this.clear = () => {\n            this.context.fillStyle = \"black\";\n            this.context.fillRect(0, 0, this.width, this.height);\n            this._clearBuffer();\n        };\n        /* Draw one pixel on display and frame buffer */\n        this.drawPixel = (x, y, color) => {\n            const bufferLocation = x + y * DISPLAY_WIDTH;\n            // check if the pixel is already on. if on with need to trigger CPU to set the F register.\n            const collision = this.frameBuffer[bufferLocation] & color;\n            this.frameBuffer[bufferLocation] ^= color;\n            if (this.frameBuffer[bufferLocation]) {\n                this.context.fillStyle = DISPLAY_COLOR;\n            }\n            else {\n                this.context.fillStyle = \"black\";\n            }\n            this.context.fillRect(x * this.pixelWidth, y * this.pixelHeight, this.pixelWidth, this.pixelHeight);\n            return collision;\n        };\n        // find the canvas elment. and get its context.\n        this.canvas = document.getElementById(\"chip-8-frame-buffer\");\n        this.context = this.canvas.getContext(\"2d\");\n        /* calculate sizes , initialize frame buffer */\n        this.width = this.canvas.width;\n        this.height = this.canvas.height;\n        this.pixelWidth = this.canvas.width / DISPLAY_WIDTH;\n        this.pixelHeight = this.canvas.height / DISPLAY_HEIGHT;\n        this.frameBuffer = new Uint8Array(DISPLAY_WIDTH * DISPLAY_HEIGHT);\n        for (let i = 0; i < DISPLAY_HEIGHT * DISPLAY_WIDTH; i++) {\n            this.frameBuffer[i] = 0;\n        }\n        this.clear();\n    }\n}\n\n\n//# sourceURL=webpack://chip8-js/./src/interfaces/display.ts?");

/***/ }),

/***/ "./src/interfaces/keyboard.ts":
/*!************************************!*\
  !*** ./src/interfaces/keyboard.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Keyboard)\n/* harmony export */ });\n/* Emulate Chip 8 keyboard */\nclass Keyboard {\n    constructor() {\n        this.getKeys = () => {\n            return this.keys;\n        };\n        this.getCurrentPressed = () => {\n            // this is a one shot function. it is used for the LD_VX_K opcode which wait for a key press.\n            const pressed = this.currentPressed;\n            this.currentPressed = undefined;\n            return pressed;\n        };\n        this.isPressed = (key) => this.keys & (1 << key);\n        /* chip-8 key pad is\n           1 2 3 C\n           4 5 6 D\n           7 8 9 E\n           A 0 B F\n    \n           We map the keyboard matrix of 1-4 to 1-Z to this pad. so 0=x and 1=1 C=4 F=V\n           */\n        // prettier-ignore\n        this.keyMap = [\n            \"x\", \"1\", \"2\",\n            \"3\", \"q\", \"w\",\n            \"e\", \"a\", \"s\",\n            \"d\", \"z\", \"c\",\n            \"4\", \"r\", \"f\",\n            \"v\",\n        ];\n        this.keys = 0;\n        this.currentPressed = undefined;\n        document.addEventListener(\"keydown\", (event) => {\n            // when a key is down we map it to chip-8 key by its index and set the right bit in keys variable.\n            const key = this.keyMap.indexOf(event.key);\n            if (key !== -1) {\n                // save last key pressed.\n                this.currentPressed = key;\n                this.keys |= 1 << key;\n            }\n        });\n        document.addEventListener(\"keyup\", (event) => {\n            // on keyup , we unset the key from the keys variable.\n            const key = this.keyMap.indexOf(event.key);\n            if (key !== -1) {\n                if (key === this.currentPressed) {\n                    this.currentPressed = undefined;\n                }\n                const keyMask = 0xffff ^ (1 << key);\n                this.keys &= keyMask;\n            }\n        });\n    }\n}\n\n\n//# sourceURL=webpack://chip8-js/./src/interfaces/keyboard.ts?");

/***/ }),

/***/ "./src/interfaces/memory.ts":
/*!**********************************!*\
  !*** ./src/interfaces/memory.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Memory)\n/* harmony export */ });\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n// font set save in memory at location 0x0000, 16 characters from 0-F each char built from 5 bytes.\n//prettier-ignore\nconst FONT_SET = [\n    0xf0, 0x90, 0x90, 0x90, 0xf0,\n    0x20, 0x60, 0x20, 0x20, 0x70,\n    0xf0, 0x10, 0xf0, 0x80, 0xf0,\n    0xf0, 0x10, 0xf0, 0x10, 0xf0,\n    0x90, 0x90, 0xf0, 0x10, 0x10,\n    0xf0, 0x80, 0xf0, 0x10, 0xf0,\n    0xf0, 0x80, 0xf0, 0x90, 0xf0,\n    0xf0, 0x10, 0x20, 0x40, 0x40,\n    0xf0, 0x90, 0xf0, 0x90, 0xf0,\n    0xf0, 0x90, 0xf0, 0x10, 0xf0,\n    0xf0, 0x90, 0xf0, 0x90, 0x90,\n    0xe0, 0x90, 0xe0, 0x90, 0xe0,\n    0xf0, 0x80, 0x80, 0x80, 0xf0,\n    0xe0, 0x90, 0x90, 0x90, 0xe0,\n    0xf0, 0x80, 0xf0, 0x80, 0xf0,\n    0xf0, 0x80, 0xf0, 0x80, 0x80,\n];\nclass Memory {\n    constructor() {\n        this.LoadRom = (url) => __awaiter(this, void 0, void 0, function* () {\n            /* Load ROM by URL */\n            const response = yield fetch(url);\n            const romData = yield response.arrayBuffer();\n            const romArray = new Uint8Array(romData);\n            // place ROM data from 0x200\n            let romAddress = 0x200;\n            for (let i = 0; i < romArray.length; i++) {\n                this.ram[romAddress + i] = romArray[i];\n            }\n        });\n        this.getByte = (address) => {\n            return this.ram[address];\n        };\n        this.getWord = (address) => {\n            return (this.ram[address] << 8) + this.ram[address + 1];\n        };\n        this.setByte = (address, value) => {\n            this.ram[address] = value;\n        };\n        this.setWord = (address, value) => {\n            this.ram[address] = (value & 0xff00) >> 8;\n            this.ram[address + 1] = value & 0xff;\n        };\n        this.ram = new Uint8Array(4096);\n        for (let i = 0; i < FONT_SET.length; i++) {\n            this.ram[i] = FONT_SET[i];\n        }\n    }\n}\n\n\n//# sourceURL=webpack://chip8-js/./src/interfaces/memory.ts?");

/***/ }),

/***/ "./src/interfaces/motherboard.ts":
/*!***************************************!*\
  !*** ./src/interfaces/motherboard.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ MotherBoard)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ \"./src/constants.js\");\n/* harmony import */ var _cpu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cpu */ \"./src/interfaces/cpu/index.ts\");\n/* harmony import */ var _display__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./display */ \"./src/interfaces/display.ts\");\n/* harmony import */ var _keyboard__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./keyboard */ \"./src/interfaces/keyboard.ts\");\n/* harmony import */ var _memory__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./memory */ \"./src/interfaces/memory.ts\");\n/* harmony import */ var _sound__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./sound */ \"./src/interfaces/sound.ts\");\n/* harmony import */ var _timer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./timer */ \"./src/interfaces/timer.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\nclass MotherBoard {\n    constructor() {\n        this.getRAM = () => this.ram;\n        this.getKeyboard = () => this.keyboard;\n        this.getDisplay = () => this.display;\n        this.loadRom = (url) => __awaiter(this, void 0, void 0, function* () {\n            yield this.ram.LoadRom(url);\n        });\n        this.boot = () => {\n            // booting up the device. CPU reset and set up the CPI cycle clock.\n            this.cpu.reset();\n            setInterval(this.cpu.cycle, _constants__WEBPACK_IMPORTED_MODULE_0__.CPU_CLOCK_SPEED);\n        };\n        this.cpu = new _cpu__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this);\n        this.ram = new _memory__WEBPACK_IMPORTED_MODULE_4__[\"default\"]();\n        this.keyboard = new _keyboard__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n        this.display = new _display__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n        this.timer = new _timer__WEBPACK_IMPORTED_MODULE_6__[\"default\"](this.cpu);\n        this.timer.start();\n        this.sound = new _sound__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this.cpu);\n        this.sound.start();\n    }\n}\n\n\n//# sourceURL=webpack://chip8-js/./src/interfaces/motherboard.ts?");

/***/ }),

/***/ "./src/interfaces/sound.ts":
/*!*********************************!*\
  !*** ./src/interfaces/sound.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Sound)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ \"./src/constants.js\");\n\nclass Sound {\n    constructor(cpu) {\n        this.soundTick = () => {\n            /* the timer tick , each tick we ask from the CPU to return the sound timer register.\n               If the timer is larger then 0 and sound is off, we need to make the sound start.\n               If the timer is larger then 0 and sound is on ,do nothing.\n               If the timer is 0 and sound is on we need to turn it off */\n            const soundRegisterOn = this.cpu.soundTick();\n            if (soundRegisterOn && !this.soundIsOn) {\n                let context = new AudioContext();\n                this.oscillator = context.createOscillator();\n                this.oscillator.type = \"sine\";\n                this.oscillator.frequency.value = 800;\n                this.oscillator.connect(context.destination);\n                this.oscillator.start();\n                this.soundIsOn = true;\n            }\n            if (!soundRegisterOn && this.soundIsOn) {\n                this.oscillator.stop();\n                this.soundIsOn = false;\n            }\n        };\n        this.start = () => {\n            // Starting up the sound timer.\n            this.stop();\n            this.timer = setInterval(this.soundTick, _constants__WEBPACK_IMPORTED_MODULE_0__.SOUND_CLOCK_SPEED);\n        };\n        this.stop = () => {\n            if (this.timer != undefined) {\n                clearInterval(this.timer);\n            }\n            this.timer = undefined;\n        };\n        this.cpu = cpu;\n        this.timer = undefined;\n    }\n}\n\n\n//# sourceURL=webpack://chip8-js/./src/interfaces/sound.ts?");

/***/ }),

/***/ "./src/interfaces/timer.ts":
/*!*********************************!*\
  !*** ./src/interfaces/timer.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Timer)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants */ \"./src/constants.js\");\n\nclass Timer {\n    constructor(cpu) {\n        this.start = () => {\n            /* starting the timer. the CPU timer tick will be called each interval and\n               responsible to reduce the delay timer register by 1 each time. */\n            this.stop();\n            this.timer = setInterval(this.cpu.timerTick, _constants__WEBPACK_IMPORTED_MODULE_0__.TIMER_CLOCK_SPEED);\n        };\n        this.stop = () => {\n            if (this.timer != undefined) {\n                clearInterval(this.timer);\n            }\n            this.timer = undefined;\n        };\n        this.cpu = cpu;\n        this.timer = undefined;\n    }\n}\n\n\n//# sourceURL=webpack://chip8-js/./src/interfaces/timer.ts?");

/***/ }),

/***/ "./src/constants.js":
/*!**************************!*\
  !*** ./src/constants.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CPU_CLOCK_SPEED\": () => (/* binding */ CPU_CLOCK_SPEED),\n/* harmony export */   \"SOUND_CLOCK_SPEED\": () => (/* binding */ SOUND_CLOCK_SPEED),\n/* harmony export */   \"TIMER_CLOCK_SPEED\": () => (/* binding */ TIMER_CLOCK_SPEED)\n/* harmony export */ });\nconst CPU_CLOCK_SPEED = 1000 / 540; // 540Hz means 540 cycles in 1 second.\nconst TIMER_CLOCK_SPEED = 1000 / 60; // 60Hz\nconst SOUND_CLOCK_SPEED = 1000 / 60; // 60Hz\n\n\n//# sourceURL=webpack://chip8-js/./src/constants.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;